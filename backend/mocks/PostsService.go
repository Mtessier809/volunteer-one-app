// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"

	models "github.com/VolunteerOne/volunteer-one-app/backend/models"
)

// PostsService is an autogenerated mock type for the PostsService type
type PostsService struct {
	mock.Mock
}

// AllPosts provides a mock function with given fields:
func (_m *PostsService) AllPosts() ([]models.Posts, error) {
	ret := _m.Called()

	var r0 []models.Posts
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Posts, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Posts); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Posts)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Bind provides a mock function with given fields: _a0, _a1
func (_m *PostsService) Bind(_a0 *gin.Context, _a1 interface{}) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePost provides a mock function with given fields: post
func (_m *PostsService) CreatePost(post models.Posts) (models.Posts, error) {
	ret := _m.Called(post)

	var r0 models.Posts
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Posts) (models.Posts, error)); ok {
		return rf(post)
	}
	if rf, ok := ret.Get(0).(func(models.Posts) models.Posts); ok {
		r0 = rf(post)
	} else {
		r0 = ret.Get(0).(models.Posts)
	}

	if rf, ok := ret.Get(1).(func(models.Posts) error); ok {
		r1 = rf(post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePost provides a mock function with given fields: post
func (_m *PostsService) DeletePost(post models.Posts) error {
	ret := _m.Called(post)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Posts) error); ok {
		r0 = rf(post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditPost provides a mock function with given fields: post
func (_m *PostsService) EditPost(post models.Posts) (models.Posts, error) {
	ret := _m.Called(post)

	var r0 models.Posts
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Posts) (models.Posts, error)); ok {
		return rf(post)
	}
	if rf, ok := ret.Get(0).(func(models.Posts) models.Posts); ok {
		r0 = rf(post)
	} else {
		r0 = ret.Get(0).(models.Posts)
	}

	if rf, ok := ret.Get(1).(func(models.Posts) error); ok {
		r1 = rf(post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPost provides a mock function with given fields: id
func (_m *PostsService) FindPost(id string) (models.Posts, error) {
	ret := _m.Called(id)

	var r0 models.Posts
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Posts, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.Posts); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Posts)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPostsService interface {
	mock.TestingT
	Cleanup(func())
}

// NewPostsService creates a new instance of PostsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostsService(t mockConstructorTestingTNewPostsService) *PostsService {
	mock := &PostsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
